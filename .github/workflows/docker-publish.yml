name: Build and Publish Docker Images

on:
  push:
    branches: [ main, develop ]

permissions:
  contents: write

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  IMAGE_PREFIX: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-app

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: 🗓 Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: 🔢 Get short SHA
        id: sha
        run: echo "sha=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: 🏷 Set tag name
        id: tag
        run: echo "tag=${{ steps.date.outputs.date }}-${{ steps.sha.outputs.sha }}" >> $GITHUB_OUTPUT

  sonar:
    name: 🔎 SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Set up Java (required for SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🔍 Run SonarQube Scan (with org from secrets)
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=vmmaltsev_kuber-app
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧠 Run Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
        env:
          SEMGREP_SKIP_UNKNOWN_EXTENSIONS: "1"
          SEMGREP_EXCLUDE: "api-node/ssl,api-node/healthcheck"
        continue-on-error: true

      - name: 📦 Scan NodeJS dependencies (api-node)
        working-directory: ./api-node
        continue-on-error: true
        run: |
          if [ -f package.json ]; then
            npm install --omit=dev
            npm audit --audit-level=high
          else
            echo "No package.json found in api-node, skipping npm audit."
          fi

      - name: 📦 Scan React dependencies (client-react)
        working-directory: ./client-react
        continue-on-error: true
        run: |
          if [ -f package.json ]; then
            npm install --omit=dev
            npm audit --audit-level=high
          else
            echo "No package.json found in client-react, skipping npm audit."
          fi

      - name: 🐳 Scan Dockerfiles (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
          exit-code: 1
          format: table
        continue-on-error: true

      - name: 🔍 Scan for secrets (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true

      - name: 📤 Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            .semgrep
            gitleaks-report.json
            trivy*.txt
          if-no-files-found: ignore

      - name: 📌 Add security summary
        if: always()
        run: |
          echo "### 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Semgrep (SAST) completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy Dockerfile scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Gitleaks secrets scan completed" >> $GITHUB_STEP_SUMMARY

  build:
    needs: [prepare, security, sonar]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - api-golang
          - api-node
          - client-react
          - load-generator-python
          - postgresql
    name: 🐳 Build and Push ${{ matrix.service }}
    steps:
      - uses: actions/checkout@v4

      - name: 👷 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 🚀 Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
            ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare.outputs.tag }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
          cache-to: type=inline

      - name: 🐳 Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare.outputs.tag }}
          format: table
          exit-code: 0
          vuln-type: os,library
          severity: CRITICAL,HIGH
        continue-on-error: true

      - name: 📂 Save Trivy Report
        if: always()
        run: |
          mkdir -p trivy-reports
          trivy image --format table --severity CRITICAL,HIGH -o trivy-reports/${{ matrix.service }}.txt ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare.outputs.tag }}

      - name: 📤 Upload Trivy Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ matrix.service }}
          path: trivy-reports/${{ matrix.service }}.txt

      - name: 📌 Add Trivy summary
        if: always()
        run: |
          echo "## 🐳 Trivy Image Scan: ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Report: trivy-${{ matrix.service }}.txt" >> $GITHUB_STEP_SUMMARY

      - name: 📟 Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.prepare.outputs.tag }}
          output-file: sbom-${{ matrix.service }}.spdx.json
        continue-on-error: true

      - name: 📤 Upload SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json
          if-no-files-found: ignore
